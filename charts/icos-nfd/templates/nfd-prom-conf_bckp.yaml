apiVersion: v1
data:
  resource_available.c: |
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <assert.h>
    
    #include <getopt.h>         
    
    #include <fcntl.h>   
    #include <unistd.h>
    #include <errno.h>
    #include <sys/stat.h>
    #include <sys/types.h>
    #include <sys/time.h>
    #include <sys/mman.h>
    #include <sys/ioctl.h>
    
    #include <linux/videodev2.h>
    
    #define CLEAR(x) memset(&(x), 0, sizeof(x))
    
    enum io_method {
            IO_METHOD_READ,
            IO_METHOD_MMAP,
            IO_METHOD_USERPTR,
    };
    
    struct buffer {
            void   *start;
            size_t  length;
    };
    
    static char            *dev_name;
    static enum io_method   io = IO_METHOD_MMAP;
    static int              fd = -1;
    struct buffer          *buffers;
    static unsigned int     n_buffers;
    static int              out_buf;
    static int              force_format;
    static int              frame_count = 70;
    
    
    static int xioctl(int fh, int request, void *arg)
    {
            int r;
    
            do {
                    r = ioctl(fh, request, arg);
            } while (-1 == r && EINTR == errno);
    
            return r;
    }
    
    static void process_image(const void *p, int size)
    {
            if (out_buf)
                    fwrite(p, size, 1, stdout);
    
            fflush(stderr);
            fprintf(stderr, ".");
            fflush(stdout);
    }
    
    static int read_frame(void)
    {
            struct v4l2_buffer buf;
            unsigned int i;
    
            switch (io) {
            case IO_METHOD_READ:
                    if (-1 == read(fd, buffers[0].start, buffers[0].length)) {
                            switch (errno) {
                            case EAGAIN:
                                    return 0;
    
                            case EIO:    
                            default:
                                ;;
                            }
                    }
    
                    process_image(buffers[0].start, buffers[0].length);
                    break;
    
            case IO_METHOD_MMAP:
                    CLEAR(buf);
    
                    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
                    buf.memory = V4L2_MEMORY_MMAP;
    
                    if (-1 == xioctl(fd, VIDIOC_DQBUF, &buf)) {
                            switch (errno) {
                            case EAGAIN:
                                    return 0;
    
                            case EIO:    
                            default:
                                ;;
                            }
                    }
    
                    assert(buf.index < n_buffers);
    
                    process_image(buffers[buf.index].start, buf.bytesused);
    
                    if (-1 == xioctl(fd, VIDIOC_QBUF, &buf))
                            ;;
                    break;
    
            case IO_METHOD_USERPTR:
                    CLEAR(buf);
    
                    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
                    buf.memory = V4L2_MEMORY_USERPTR;
    
                    if (-1 == xioctl(fd, VIDIOC_DQBUF, &buf)) {
                            switch (errno) {
                            case EAGAIN:
                                    return 0;
    
                            case EIO:    
                            default:
                                    ;;
                            }
                    }
    
                    for (i = 0; i < n_buffers; ++i)
                            if (buf.m.userptr == (unsigned long)buffers[i].start
                                && buf.length == buffers[i].length)
                                    break;
    
                    assert(i < n_buffers);
    
                    process_image((void *)buf.m.userptr, buf.bytesused);
    
                    if (-1 == xioctl(fd, VIDIOC_QBUF, &buf))
                            ;;
                    break;
            }
    
            return 1;
    }
    
    static void stop_capturing(void){
            enum v4l2_buf_type type;
    
            switch (io) {
            case IO_METHOD_READ:
                    break;
    
            case IO_METHOD_MMAP:
            case IO_METHOD_USERPTR:
                    type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
                    if (-1 == xioctl(fd, VIDIOC_STREAMOFF, &type))
                        ;;
                    break;
            }
    }
    
    
    static void uninit_device(void)
    {
            unsigned int i;
    
            switch (io) {
            case IO_METHOD_READ:
                    free(buffers[0].start);
                    break;
    
            case IO_METHOD_MMAP:
                    for (i = 0; i < n_buffers; ++i)
                            if (-1 == munmap(buffers[i].start, buffers[i].length))
                                    ;;
                    break;
    
            case IO_METHOD_USERPTR:
                    for (i = 0; i < n_buffers; ++i)
                            free(buffers[i].start);
                    break;
            }
    
            free(buffers);
    }
    
    static void init_read(unsigned int buffer_size)
    {
            buffers = calloc(1, sizeof(*buffers));
    
            if (!buffers) {
                    fprintf(stderr, "Out of memory\\n");
                    exit(EXIT_FAILURE);
            }
    
            buffers[0].length = buffer_size;
            buffers[0].start = malloc(buffer_size);
    
            if (!buffers[0].start) {
                    fprintf(stderr, "Out of memory\\n");
                    exit(EXIT_FAILURE);
            }
    }
    
    static void init_mmap(void)
    {
            struct v4l2_requestbuffers req;
    
            CLEAR(req);
    
            req.count = 4;
            req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            req.memory = V4L2_MEMORY_MMAP;
    
            if (-1 == xioctl(fd, VIDIOC_REQBUFS, &req)) {
                    if (EINVAL == errno) {
                            fprintf(stderr, "%s does not support "
                                     "memory mappingn", dev_name);
                            exit(EXIT_FAILURE);
                    } else {
                            ;;
                    }
            }
    
            if (req.count < 2) {
                    fprintf(stderr, "Insufficient buffer memory on %s\\n",
                             dev_name);
                    exit(EXIT_FAILURE);
            }
    
            buffers = calloc(req.count, sizeof(*buffers));
    
            if (!buffers) {
                    fprintf(stderr, "Out of memory\\n");
                    exit(EXIT_FAILURE);
            }
    
            for (n_buffers = 0; n_buffers < req.count; ++n_buffers) {
                    struct v4l2_buffer buf;
    
                    CLEAR(buf);
    
                    buf.type        = V4L2_BUF_TYPE_VIDEO_CAPTURE;
                    buf.memory      = V4L2_MEMORY_MMAP;
                    buf.index       = n_buffers;
    
                    if (-1 == xioctl(fd, VIDIOC_QUERYBUF, &buf))
                            ;;
    
                    buffers[n_buffers].length = buf.length;
                    buffers[n_buffers].start =
                            mmap(NULL /* start anywhere */,
                                  buf.length,
                                  PROT_READ | PROT_WRITE /* required */,
                                  MAP_SHARED /* recommended */,
                                  fd, buf.m.offset);
    
                    if (MAP_FAILED == buffers[n_buffers].start)
                            ;;
            }
    }
    
    static void init_userp(unsigned int buffer_size)
    {
            struct v4l2_requestbuffers req;
    
            CLEAR(req);
    
            req.count  = 4;
            req.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            req.memory = V4L2_MEMORY_USERPTR;
    
            if (-1 == xioctl(fd, VIDIOC_REQBUFS, &req)) {
                    if (EINVAL == errno) {
                            fprintf(stderr, "%s does not support "
                                     "user pointer i/on", dev_name);
                            exit(EXIT_FAILURE);
                    } else {
                            ;;
                    }
            }
    
            buffers = calloc(4, sizeof(*buffers));
    
            if (!buffers) {
                    fprintf(stderr, "Out of memory\\n");
                    exit(EXIT_FAILURE);
            }
    
            for (n_buffers = 0; n_buffers < 4; ++n_buffers) {
                    buffers[n_buffers].length = buffer_size;
                    buffers[n_buffers].start = malloc(buffer_size);
    
                    if (!buffers[n_buffers].start) {
                            fprintf(stderr, "Out of memory\\n");
                            exit(EXIT_FAILURE);
                    }
            }
    }
    
    static void close_device(void){
        close(fd);
    }
    
    static void open_device(void){
            struct stat st;
            stat(dev_name, &st);
            S_ISCHR(st.st_mode);
            fd = open(dev_name, O_RDWR | O_NONBLOCK, 0);
    }
       
    int main(int argc, char **argv){
        dev_name = "/dev/video0";
        open_device();
        stop_capturing();
        uninit_device();
        close_device();
        if(errno==0)
                printf("{\"device\":\"%s\",\"avail\":%d}",dev_name,1);
        else if(errno==16)
                printf("{\"device\":\"%s\",\"avail\":%d}",dev_name,0);
        else
                printf("{\"device\":\"%s\",\"avail\":%d}","None",-1);
        return 0;
    }


  prom-exp.py: |
    import subprocess
    import requests
    import time
    import json
    from prometheus_client import start_http_server, Gauge
    from prometheus_client.core import REGISTRY
    import prometheus_client as prom

    prom.REGISTRY.unregister(prom.PROCESS_COLLECTOR)
    prom.REGISTRY.unregister(prom.PLATFORM_COLLECTOR)
    prom.REGISTRY.unregister(prom.GC_COLLECTOR)


    APISERVER="kubernetes.default.svc"
    SERVICEACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
    TOKEN_PATH="{}/token".format(SERVICEACCOUNT)
    CACERT_PATH="{}/ca.crt".format(SERVICEACCOUNT)

    TOKEN_FILE=open(TOKEN_PATH, "r")
    TOKEN=TOKEN_FILE.read()

    headers = {
        'Authorization': 'Bearer {}'.format(TOKEN)
    }

    # Function to run the command in the background
    def run_command():
        
        process = subprocess.Popen(['./resource_available'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        stdout, stderr = process.communicate()
        result = json.loads(stdout)
 
        return result['avail']


    class Collector:
        def __init__(self, ):
            self.metric_gauge = Gauge(
                'node_mounted', 'devices mounted', ['node_name','node_uid','device','resource_path']
            )

            self.devs=[]

        def fetch_k8s_node_usb_devices(self,metric_gauge):

            try:
                response = requests.get('https://{}/api/v1/nodes'.format(APISERVER), headers=headers, verify=CACERT_PATH)
                response.raise_for_status()
                data = response.json()
                cur_devs=[]
                for node in data['items']:
                    node_uid = node['metadata']['uid']
                    labels = node['metadata']['labels']
                    node_name = node['metadata']['name']
                    video_path = 'squat.ai/video'
                    avail_cameras = node['status']['allocatable'][video_path]
                    for label_name, label_value in labels.items():
                        if label_name.startswith('feature.node.kubernetes.io/usb-'):
                            label_name = label_name.replace('feature.node.kubernetes.io/','')
                            label_name = label_name.replace('.present','')
                            if('usb-08' in label_name):
                                label_name = label_name.replace('usb-08','usb-storage')
                                cur_devs.append(label_name)
                                if(label_name not in self.devs):
                                    self.devs.append(label_name)

                            if('usb-03' in label_name):
                                label_name = label_name.replace('usb-03','usb-human-interface-dev')
                                cur_devs.append(label_name)
                                if(label_name not in self.devs):
                                    self.devs.append(label_name)


                            if('usb-ff' in label_name):
                                label_name = label_name.replace('usb-ff','usb-video')
                                cur_devs.append(label_name)
                                if(label_name not in self.devs):
                                    self.devs.append(label_name)

                    _diff = [x for x in self.devs if x not in cur_devs ]

                    res=run_command()
                    #if(res!=-1 and "video" not in cur_devs):
                    #    cur_devs.append("i2c-video")
                    for cd in cur_devs:
                        if('video' not in cd):
                            self.metric_gauge.labels(node_name=node_name,node_uid=node_uid,device=cd,resource_path="none").set(1)
                       
                        if(res!=-1):
                            self.metric_gauge.labels(node_name=node_name,node_uid=node_uid,device=cd,resource_path=video_path).set(res)

                    for cd in _diff:
                        self.metric_gauge.labels(node_name=node_name,node_uid=node_uid,device=cd,resource_path=video_path).set(-1)


            except Exception as e:
                print(f"Failed to fetch Kubernetes node devices: {str(e)}")


        def collect_info(self, ):
            self.fetch_k8s_node_usb_devices(self.metric_gauge)



    if __name__ == '__main__':
        start_http_server(8081)
        collector = Collector()

        while True:
            time.sleep(1)
            collector.collect_info()
  requirements.txt: |+
    requests
    prometheus-client

kind: ConfigMap
metadata:
  name: nfd-prom-conf-bckp
  namespace: {{ include "icos-nfd.namespace" . }}
